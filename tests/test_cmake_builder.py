from pathlib import Path
from unittest.mock import Mock

import pytest
from py_app_dev.core.pipeline import PipelineStepConfig

from tests.utils import CMakeAnalyzer, write_file
from yanga.cmake.builder import CMakeBuildSystemGenerator
from yanga.cmake.cmake_backend import CMakeComment
from yanga.domain.config import PlatformConfig
from yanga.domain.execution_context import ExecutionContext


@pytest.fixture
def env(tmp_path: Path) -> ExecutionContext:
    env = Mock(spec=ExecutionContext)
    env.project_root_dir = tmp_path
    env.variant_name = "mock_variant"
    env.create_artifacts_locator = Mock()
    return env


def test_create_variant_cmake_file(env: ExecutionContext) -> None:
    output_dir = env.project_root_dir / "output"
    write_file(
        Path(env.project_root_dir, "tools/my_cmake_generator.py"),
        """
from pathlib import Path
from typing import Dict, List

from yanga.domain.execution_context import (
    ExecutionContext,
)

from yanga.cmake.cmake_backend import (
    CMakeComment,
    CMakeElement,
)
from yanga.cmake.generator import CMakeGenerator


class MyCMakeGenerator(CMakeGenerator):
    def __init__(self, execution_context: ExecutionContext, output_dir: Path, config: Dict) -> None:
        super().__init__(execution_context, output_dir, config)

    def generate(self) -> list[CMakeElement]:
        elements: list[CMakeElement] = []
        elements.append(CMakeComment(f"Generated by {self.__class__.__name__}"))
        return elements

""",
    )
    env.platform = PlatformConfig(
        name="MockPlatfrom",
        cmake_generators=[
            PipelineStepConfig(
                step="MyCMakeGenerator",
                file="tools/my_cmake_generator.py",
            )
        ],
    )
    generator = CMakeBuildSystemGenerator(env, output_dir)
    cmake_file = generator.create_variant_cmake_file()
    assert cmake_file.path == output_dir / "variant.cmake"
    cmake_analyzer = CMakeAnalyzer(cmake_file.content)
    comment = cmake_analyzer.assert_element_of_type(CMakeComment)
    assert comment.to_string() == "# Generated by MyCMakeGenerator"
