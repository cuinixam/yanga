[tool.poetry]
name = "yanga"
version = "2.3.0"
description = "Yet another ninja generator to build C/CPP projects."
authors = ["cuinixam <me@cuinixam.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/cuinixam/yanga"
documentation = "https://yanga.readthedocs.io"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
packages = [
    { include = "yanga", from = "src" },
]

[tool.poetry.scripts]
yanga = "yanga.ymain:main"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/cuinixam/yanga/issues"
"Changelog" = "https://github.com/cuinixam/yanga/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.10,<3.13"
mashumaro = "^3.5"
loguru = "^0.7"
cookiecutter = "^2.1"
py-app-dev = "^2.5"
customtkinter = "^5.2"
pillow = "^10.1"
kspl = "^1.0"
pick = "^2.2"
typer = "^0.12"
hammocking = "^0.2"
pypeline-runner = "^1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3"
pytest-cov = "^6.0"
pre-commit = "^4.0"
ruff = "^0.9"
pyinstaller = "^6.11"

[tool.poetry.group.docs.dependencies]
myst-parser = ">=0.16"
sphinx = ">=4.0"
sphinxcontrib-mermaid = "^0.8"
mlx-traceability = "^10.0"
sphinx-copybutton = "^0.5"
sphinx-new-tab-link = "^0.2"
sphinx-book-theme = "^1.1"
sphinx-design = "^0.5"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/yanga/__init__.py:__version__",
    "docs/conf.py:release",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true

[tool.pytest.ini_options]
addopts = "-vv -Wdefault --cov=yanga --cov-report=term-missing:skip-covered --cov-branch -s"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.ruff]
target-version = "py38"
line-length = 180
lint.select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]
exclude = [
    "bootstrap.py"
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101",
]

[tool.ruff.lint.isort]
known-first-party = ["yanga", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
    'template/**'
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "bootstrap.*"
ignore_errors = true

[tool.codespell]
skip = "build_exe.spec"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
