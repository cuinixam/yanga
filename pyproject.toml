[build-system]
build-backend = "poetry.core.masonry.api"

requires = [ "poetry-core>=2,<3" ]

[project]
name = "yanga"
version = "2.7.0"
description = "Yet another ninja generator to build C/CPP projects."
readme = "README.md"
license = { text = "MIT" }
authors = [
  { name = "cuinixam", email = "me@cuinixam.me" },
]

requires-python = "<4.0,>=3.10"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries",
]
dependencies = [
  "clanguru>=0.7,<1",
  "cookiecutter>=2.1,<3",
  "customtkinter>=5.2,<6",
  "kspl>=1,<2",
  "loguru>=0.7,<1",
  "mashumaro>=3.5,<4",
  "pick>=2.2,<3",
  "pillow>=10.1,<11",
  "py-app-dev>=2.14,<3",
  "pypeline-runner>=1,<2",
  "typer>=0.12,<1",
]

urls."Bug Tracker" = "https://github.com/cuinixam/yanga/issues"
urls.Changelog = "https://github.com/cuinixam/yanga/blob/main/CHANGELOG.md"
urls.documentation = "https://yanga.readthedocs.io"
urls.repository = "https://github.com/cuinixam/yanga"
scripts.yanga = "yanga.ymain:main"

[dependency-groups]
dev = [
  "mlx-traceability>=11,<12",
  # docs
  "myst-parser>=4,<5",
  "pip-system-certs>=4,<5",
  "pre-commit>=4,<5",
  "pyinstaller>=6.11,<7",
  "pytest>=8.3,<9",
  "pytest-cov>=6,<7",
  "ruff>=0.9,<1",
  "sphinx>=8,<9",
  "sphinx-book-theme>=1.1,<2",
  "sphinx-copybutton>=0,<1",
  "sphinx-design>=0,<1",
  "sphinx-new-tab-link>=0,<1",
  "sphinxcontrib-mermaid>=1,<2",
]

[tool.poetry]
packages = [
  { include = "yanga", from = "src" },
]

[tool.ruff]
target-version = "py39"
line-length = 180
lint.select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",   # flake8-docstrings
  "E",   # pycodestyle
  "F",   # pyflake
  "I",   # isort
  "RUF", # ruff specific
  "S",   # flake8-bandit
  "UP",  # pyupgrade
  "W",   # pycodestyle
]
lint.ignore = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D106", # Missing docstring in public nested class
  "D107", # Missing docstring in `__init__`
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
  "D401", # First line of docstring should be in imperative mood
]
lint.per-file-ignores."bootstrap.py" = [ "D200", "D205", "D417", "S603", "UP006", "UP035" ]
lint.per-file-ignores."conftest.py" = [ "D100" ]
lint.per-file-ignores."setup.py" = [ "D100" ]
lint.per-file-ignores."tests/**/*" = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "S101",
]

[tool.codespell]
skip = "build_exe.spec"

[tool.pytest.ini_options]
addopts = "-vv -Wdefault --cov=yanga --cov-report=term-missing:skip-covered --cov-branch -s"
pythonpath = [ "src" ]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING",
  "raise NotImplementedError",
  'if __name__ == "__main__":',
]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
  'docs/.*',
  'setup.py',
  'template/**',
]
disable_error_code = [ "import-untyped" ]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "bootstrap.*"
ignore_errors = true

[tool.uv]
package = true

[tool.semantic_release]
version_toml = [ "pyproject.toml:project.version" ]
version_variables = [
  "src/yanga/__init__.py:__version__",
  "docs/conf.py:release",
]
build_command = """
pip install uv
uv lock
git add uv.lock
uv build
"""

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''test(?:\([^)]*?\))?: .+''',
  '''build\((?!deps\): .+)''',
  '''Merged? .*''',
  '''Initial [Cc]ommit.*''',         # codespell:ignore
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true
